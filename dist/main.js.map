{"version":3,"file":"main.js","mappings":";;;;;;;;;;AAAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACtBa;AACb,WAAW,mBAAO,CAAC,kBAAM;AACzB,SAAS,mBAAO,CAAC,cAAI;AACrB,YAAY,mBAAO,CAAC,oBAAO;AAC3B,SAAS,mBAAO,CAAC,0BAAU;AAC3B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,6CAA6C,gBAAgB;AAC7D,CAAC;AACD,4CAA4C,oBAAoB;AAChE;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC","sources":["webpack://mmdlauncher/external node-commonjs \"electron\"","webpack://mmdlauncher/external node-commonjs \"fs\"","webpack://mmdlauncher/external node-commonjs \"https\"","webpack://mmdlauncher/external node-commonjs \"path\"","webpack://mmdlauncher/webpack/bootstrap","webpack://mmdlauncher/./src/main.ts"],"sourcesContent":["module.exports = require(\"electron\");","module.exports = require(\"fs\");","module.exports = require(\"https\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\r\nvar path = require(\"path\");\r\nvar fs = require(\"fs\");\r\nvar https = require(\"https\");\r\nvar _a = require(\"electron\"), app = _a.app, BrowserWindow = _a.BrowserWindow, ipcMain = _a.ipcMain, nativeImage = _a.nativeImage, NativeImage = _a.NativeImage;\r\napp.whenReady().then(function () {\r\n    var mainWindow = new BrowserWindow({\r\n        webPreferences: {\r\n            preload: path.resolve(__dirname, \"preload.js\")\r\n        },\r\n        titleBarStyle: \"hidden\",\r\n        titleBarOverlay: {\r\n            color: \"#f5f3f2\",\r\n            symbolColor: \"#74b1be\",\r\n            height: 40,\r\n            transparent: true\r\n        }\r\n    });\r\n    mainWindow.loadFile(\"dist/index.html\");\r\n    // mainWindow.webContents.openDevTools({ mode: 'detach' });\r\n});\r\napp.once(\"window-all-closed\", function () { return app.quit(); });\r\nvar iconName = path.join(__dirname, \"iconForDragAndDrop.png\");\r\nvar icon = fs.createWriteStream(iconName);\r\nhttps.get(\"https://img.icons8.com/ios/452/drag-and-drop.png\", function (response) {\r\n    response.pipe(icon);\r\n});\r\n// Create a new file to copy - you can also copy existing files.\r\nfs.writeFileSync(path.join(__dirname, \"text.txt\"), \"# First file to test drag and drop\");\r\nipcMain.on(\"ondragstart\", function (event, filePath) {\r\n    event.sender.startDrag({\r\n        file: path.join(__dirname, filePath),\r\n        icon: iconName\r\n    });\r\n});\r\n"],"names":[],"sourceRoot":""}